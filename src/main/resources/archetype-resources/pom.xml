<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>${groupId}</groupId>
    <artifactId>${artifactId}</artifactId>
    <version>${version}</version>
    <name>${artifactId}</name>
    <packaging>war</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- LIBRARIES -->
        <gwt.version>2.7.0</gwt.version>
        <spring.framework.version>4.2.6.RELEASE</spring.framework.version>
        <gwtbootstrap3.version>0.9.3</gwtbootstrap3.version>
        <slf4j.version>1.7.12</slf4j.version>
        <hibernate-validator.version>4.2.0.Final</hibernate-validator.version>
        <!-- TEST -->
        <junit.version>4.12</junit.version>
        <selenium.version>2.53.1</selenium.version>
        <!-- PLUGINS -->
        <maven-compiler-plugin.version>3.1</maven-compiler-plugin.version>
        <maven-war-plugin.version>2.4</maven-war-plugin.version>
        <gwt-maven-plugin.version>2.7.0</gwt-maven-plugin.version>
        <tomcat-maven-plugin.version>2.1</tomcat-maven-plugin.version>
        <maven-surefire-plugin.version>2.19.1</maven-surefire-plugin.version>
        <!-- CONFIGURATIONs -->
        <gwt.port>8080</gwt.port>
        <gwt.debug.port>8000</gwt.debug.port>
        <gwt.compiler.precompile>true</gwt.compiler.precompile>
        <gwt.compiler.localWorkers>3</gwt.compiler.localWorkers>
        <gwt.compiler.style>PRETTY</gwt.compiler.style>
        <gwt.compiler.optimizationLevel>3</gwt.compiler.optimizationLevel>
        <gwt.compiler.logLevel>WARN</gwt.compiler.logLevel>
        <gwt.compiler.disableCastChecking>false</gwt.compiler.disableCastChecking>
        <gwt.compiler.disableClassMetadata>false</gwt.compiler.disableClassMetadata>
        <gwt.compiler.bindAddress>0.0.0.0</gwt.compiler.bindAddress>
        <gwt.noserver>true</gwt.noserver>       <!-- set true to use remote tomcat instead of internal  Jetty -->
        <gwt.target>/${artifactId}/index.html</gwt.target>
        <maven-compiler.source>1.7</maven-compiler.source>
        <maven-compiler.target>1.7</maven-compiler.target>
        <tomcat.path>/${artifactId}</tomcat.path>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.google.gwt</groupId>
                <artifactId>gwt</artifactId>
                <version>${gwt.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- GWT DEPENDENCIES -->
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-servlet</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-user</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-dev</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google.web.bindery</groupId>
            <artifactId>requestfactory-apt</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.web.bindery</groupId>
            <artifactId>requestfactory-server</artifactId>
        </dependency>
        <!-- GWT-BOOTSTRAP3 -->
        <dependency>
            <groupId>org.gwtbootstrap3</groupId>
            <artifactId>gwtbootstrap3</artifactId>
            <version>${gwtbootstrap3.version}</version>
        </dependency>
        <dependency>
            <groupId>org.gwtbootstrap3</groupId>
            <artifactId>gwtbootstrap3-extras</artifactId>
            <version>${gwtbootstrap3.version}</version>
            <scope>provided</scope>
        </dependency>
        <!-- SPRING -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>
        <!-- VALIDATION -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>${hibernate-validator.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>${hibernate-validator.version}</version>
            <classifier>sources</classifier>
            <scope>provided</scope>
        </dependency>
        <!-- LOG -->
        <!-- SLF4J logging libraries -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <!-- any library that uses commons-logging will be directed to slf4j -->
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <!-- any library that uses slf4j will be directed to java.util.logging -->
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-jdk14</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <!-- End SLF4J logging libraries -->
        <!-- TEST -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
            <version>${junit.version}</version>
        </dependency>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>${selenium.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>javax.servlet</groupId>
                    <artifactId>servlet-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit4</artifactId>
            <version>${maven-surefire-plugin.version}</version>
        </dependency>
    </dependencies>

    <build>
        <!-- Output classes directly into the webapp, so that IDEs and "mvn process-classes" update them in DevMode -->
        <outputDirectory>${project.build.directory}/${project.build.finalName}/WEB-INF/classes</outputDirectory>
        <resources>
            <resource>
                <directory>src/main/config</directory>
                <includes>
                    <include>**/*.properties</include>
                </includes>
                <filtering>true</filtering>
                <targetPath>${project.build.directory}/${project.build.finalName}/WEB-INF/classes</targetPath>
            </resource>
            <resource>
                <directory>src/main/META-INF</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
                <targetPath>${project.build.directory}/${project.build.finalName}/META-INF</targetPath>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                    <include>**/*.drl</include>
                    <include>**/*.png</include>
                    <include>**/*.jpg</include>
                    <include>**/*.jpeg</include>
                    <include>**/*.gif</include>
                    <include>**/*.css</include>
                    <include>**/*.sql</include>
                </includes>
                <targetPath>${project.build.directory}/${project.build.finalName}/WEB-INF/classes</targetPath>
            </resource>
            <resource>
                <directory>src/test/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                </includes>
                <filtering>true</filtering>
                <targetPath>${project.build.directory}/test-classes</targetPath>
            </resource>
            <resource>
                <directory>src/main/webapp</directory>
                <targetPath>${project.build.directory}/${project.build.finalName}</targetPath>
            </resource>
        </resources>
        <plugins>
            <!-- GWT Maven Plugin -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>gwt-maven-plugin</artifactId>
                <version>${gwt-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>test</goal>
                            <goal>generateAsync</goal>
                        </goals>
                    </execution>
                </executions>
                <!-- Plugin configuration. There are many available options, see
                  gwt-maven-plugin documentation at codehaus.org -->
                <configuration>
                    <runTarget>${gwt.target}</runTarget>
                    <modules>
                        <module>${package}.${artifactId}</module>
                    </modules>
                    <debugPort>${gwt.debug.port}</debugPort>
                    <noServer>${gwt.noserver}</noServer>
                    <generateDirectory>${basedir}/src/main/java</generateDirectory>
                    <port>${gwt.port}</port>
                    <codeServerPort>9876</codeServerPort>
                    <bindAddress>${gwt.compiler.bindAddress}</bindAddress>
                    <warSourceDirectory>${project.build.directory}/${project.build.finalName}</warSourceDirectory>
                    <superDevMode>true</superDevMode>
                    <extraJvmArgs>-Djava.io.tmpdir=${project.build.directory}</extraJvmArgs>
                    <workDir>${project.build.directory}</workDir>
                    <precompile>${gwt.compiler.precompile}</precompile>
                    <localWorkers>${gwt.compiler.localWorkers}</localWorkers>
                    <style>${gwt.compiler.style}</style>
                    <optimizationLevel>${gwt.compiler.optimizationLevel}</optimizationLevel>
                    <logLevel>${gwt.compiler.logLevel}</logLevel>
                    <disableCastChecking>${gwt.compiler.disableCastChecking}</disableCastChecking>
                    <disableClassMetadata>${gwt.compiler.disableClassMetadata}</disableClassMetadata>
                    <incremental>false</incremental>
                    <outputDirectory>${project.build.directory}/${project.build.finalName}</outputDirectory>
                    <!-- For external Tomcat, this two must match to have client-side super-dev debug -->
                    <!--<outputDirectory>/path/to/tomcat/webapps/dir/${artifactId}</outputDirectory>-->
                    <!--<launcherDir>/path/to/tomcat/webapps/dir/${artifactId}</launcherDir>-->
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>${tomcat-maven-plugin.version}</version>
                <configuration>
                    <!-- add the security credentials to ~/.m2/settings.xml <id>...</id> -->
                    <server>maven-tomcat</server>
                    <path>${tomcat.path}</path>
                    <url>${tomcat.server.url}</url>
                    <update>true</update>
                    <warFile>${project.build.directory}/${artifactId}.war</warFile>
                </configuration>
                <executions>
                    <execution>
                        <phase>deploy</phase>
                        <goals>
                            <goal>deploy</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>${maven-compiler.source}</source>
                    <target>${maven-compiler.target}</target>
                    <forceJavacCompilerUse>true</forceJavacCompilerUse>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${maven-war-plugin.version}</version>
                <configuration>
                    <warSourceDirectory>src/main/webapp</warSourceDirectory>
                    <warName>${artifactId}</warName>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
            </plugin>

        </plugins>
    </build>
</project>
